% we sweep the number of patches to be randomly fixed to the correct image
% nodes, and measure the reconstruction result. (see note seamPatch_20.pdf)
%
% Taeg Sang Cho, Aug 28 2008

clear;

% path declaration -> should be changed accordingly
imPath = '/csail/vision-billf2/josef/zoomr/';
evidencePath = '/csail/vision-billf3/Tim/sceneInference/evidence/';
imResultPath = './Results/';
histPath = '/csail/vision-billf3/Tim/sceneInference/hist/';
clusterCenterPath = '/csail/vision-billf3/Tim/sceneInference/clusterCent/';
resultPath = './Results/';
testImPath = '../sceneInference/Dataset/';
patchMapPath = '/csail/vision-billf3/Tim/sceneInference/patchMap/';
histPath = '/csail/vision-billf3/Tim/sceneInference/hist/';
compPath = '/csail/vision-billf3/Tim/sceneInference/compatibility/';
corrRatePath = '/csail/vision-billf3/Tim/zigsaw/corrRate';

% sweeping the images
for imNo = 1:10;    

    %% load image
    imName = sprintf('%s%s', testImPath, num2str(imNo), '.jpg');
    imSize =[750, 1000];

    inputImT = im2double(imread(imName));

    % Image resizing
    inputIm = imresize(inputImT(:, :, 1), imSize, 'bicubic');
    inputIm(:, :, 2) = imresize(inputImT(:, :, 2), imSize, 'bicubic');
    inputIm(:, :, 3) = imresize(inputImT(:, :, 3), imSize, 'bicubic');

    patchSize = 60;
    sz = size(inputIm);
    M_patches = floor(sz(1)/patchSize);
    N_patches = floor(sz(2)/patchSize);
    noPatches =  M_patches*N_patches
    inputIm = inputIm(1:M_patches*patchSize, 1:N_patches*patchSize, :);

    %% Image cutting, evidence and compatibility computation
    % Cutting the image into patches

    inputImGray = rgb2gray(inputIm);
    inputImNTSCT = rgb2ntsc(inputIm);
    
    % normalizing the NTSC channels to equalize the variance
    inputImNTSC = inputImNTSCT(:, :, 1);
    inputImNTSC(:, :, 2) = 7*inputImNTSCT(:, :, 2);
    inputImNTSC(:, :, 3) = 7*inputImNTSCT(:, :, 3);

    % Gridding into patches
    patchGray = cutImintoPatch(patchSize, patchSize, N_patches, M_patches, inputImGray);
    patchNTSC = cutImintoPatchRGB(patchSize, patchSize, N_patches, M_patches, inputImNTSC);
    patch = cutImintoPatchRGB(patchSize, patchSize, N_patches, M_patches, inputIm);

    inputImS = imresize(inputIm, 0.25/2);
    
    patchDown = ...
        cutImintoPatchRGBOverlap(9, N_patches, M_patches, 2, inputImS);

    % computing the naive energy for the compatibility
    tic;
        [compDU, compLR, DUClrDist, LRClrDist] = compCompatibilityColor(patchNTSC, patchSize, noPatches);
    toc;

    % saving the compatibility
    compName = sprintf('%s%s%s%s%s%s%s%s%s%s', compPath, 'compFiltColor_', num2str(imNo), '_', num2str(noPatches),'.mat');
    save(compName, 'compLR', 'compDU', 'DUClrDist', 'LRClrDist');    
    load(compName);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% Computing the evidence
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    eigenCompFileName = sprintf('%s%s%s%s%s', resultPath, 'PCA_ColorFastFast.mat');
    load(eigenCompFileName);

    % loading the cluster centers
    clusterFileName = sprintf('%s%s%s%s%s', clusterCenterPath, 'globalClusterColorFastSub_200.mat');
    load(clusterFileName);

    % Specifying the number of clusters
    noCluster =200;

    % Projecting all patches onto the PCA basis
    imDatasetTest = patchRas(patchDown);
    imDatasetTestPCA = EigenComp'*(imDatasetTest - repmat(meanVec, 1, size(imDatasetTest, 2)));

    % taking the top 22 coefficients (98.5% variance)
    imDatasetTestPCAT = imDatasetTestPCA(1:22, :);

    % Computing the distance between the patch representation to the
    % cluster centers
    distanceVec = zeros(noPatches, noCluster);
    for i = 1:noCluster
        distanceVec(:, i) = calcdist(imDatasetTestPCAT',centers(i, :));
    end

    % assign each patch to one of the 200 clusters
    [minDistanceTest, minDistInd]= min(distanceVec, [], 2);
    patchLabel = reshape(minDistInd, [N_patches, M_patches])';
%     figure, imshow(patchLabel/max(patchLabel(:)))
%     colormap jet   

    clusterLabelOrig = minDistInd;
    
    %% Generate the histogram representation of the image

    histIm = hist(patchLabel(:), noCluster);

    ARegressFile = sprintf('%s%s%s%s%s', resultPath, 'ARegressColorFastFast_200.mat');
    load(ARegressFile);

    % Run regression to estimate the scene
    YA = A*histIm(:);
    evidenceL = reshape(YA, [13, 17, 3]);
    
    evidence = imresize(evidenceL(:, :, 1), [12, 16]);
    evidence(:, :, 2) = imresize(evidenceL(:, :, 2), [12, 16]);
    evidence(:, :, 3) = imresize(evidenceL(:, :, 3), [12, 16]);

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% running BP to reconstruct the image -> see
    %% ./smallPatchTransform/patchTransform.m for detailed comments
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    M_Nodes = M_patches;
    N_Nodes = N_patches;
    kStates = noPatches;
    exclusive = 1;
    patchDet = [];
    sigEvid = 0.25;
    patchMoveFrom = [];
    patchMoveTo = [];

    patchRemove = [];
    withEvidence = 1;
    likeClr = [];
    sigClr = 1;
    likeClrOn = 0;
    blend = 1;
    alpha = 0.5;
    sigExcl = 1;
    overlap = 0;


    patchAdd =[];
    patchRemove = [];
    directed = 1;
    kThresh = noPatches;
    sigColor = 0.25;
    logComp = 1;
    load(compName);
    
    % Compute the compatibility given the compatibility energy 
    [cDU, cLR, cUD, cRL] = compComputeNO(M_patches, N_patches, ones(size(compDU)), ones(size(compLR)), DUClrDist, LRClrDist, logComp, ...
        noPatches, sigColor, directed, kThresh, patchRemove, patchAdd);


    corrPatchTemp = reshape([1:noPatches], [N_patches, M_patches])';

    noRandIter = 10; % This number specifies, at a given noFixStep setting, how many times to sample which image nodes to fix the original patch
    noBPIter = 1; % This number specifies, at the currently fixed patch configuration, how many times we want to run BP to reconstruct an image.
    noFixStep = [0:2:10]; % This number specifies how many patches to fix to correct locations 
    nIter = 500;
    flagError = 0;
    randInit = 1;
    pairCorr = zeros(length(noFixStep), noRandIter*noBPIter);
    clusterCorr = zeros(length(noFixStep), noRandIter*noBPIter);
    neighCorr = zeros(length(noFixStep), noRandIter*noBPIter);
    failedCorr = zeros(length(noFixStep), noRandIter*noBPIter);

    for noFixInd = 1:length(noFixStep)

        for RandIter = 1:noRandIter


            patchFixOrig = [ceil(191*rand(1, noFixStep(noFixInd)))];
            patchFix = patchFixOrig;

            for BPIter = 1:noBPIter

                tic;
                % MRF Initialization
                [nodes] = initMRFPatchSync(M_Nodes, N_Nodes, kStates, noPatches,exclusive, patchDet, cDU, cLR, cUD, cRL, patch, evidence,...
                    sigEvid,  patchMoveFrom, patchMoveTo, patchFixOrig, patchFix, patchRemove,withEvidence, likeClr, sigClr, likeClrOn, blend, randInit);

                % profile on
                for i =1:nIter
                    i
                    [nodes] = oneIterBPSync(nodes, alpha, kStates, exclusive, sigExcl, cDU, cLR, cUD, cRL, patchDet);

                    nodes = computeBeliefs(nodes,  patchDet, noPatches);
                    [nodeReconstT] = marginals2image(nodes, M_Nodes, N_Nodes);  %, noPatches - noRemove + noAdd)    
                    if(isempty(nodeReconstT))
                        flagError = 1
                        break;
                    end
                    nodeReconst = nodeReconstT;
                end

                if(flagError == 1)        
                    flagError = 0;
                    failedCorr(noFixInd, noBPIter*(RandIter-1) + BPIter) = 1;

                else
                    nodes = computeBeliefs(nodes,  patchDet, noPatches);
                    [nodeReconst] = marginals2image(nodes, M_Nodes, N_Nodes);  %, noPatches - noRemove + noAdd)
                    imOutTemp = blendPatch2Im(patchSize, patchSize, M_Nodes, N_Nodes, patch, nodeReconst);
%                     figure, imshow(imOutTemp)
                end
                %% Compute scores

                % Pairwise comparison with the ground truth
                pairCorr(noFixInd, noBPIter*(RandIter-1) + BPIter) = sum(nodeReconst(:) == corrPatchTemp(:))/noPatches;

                % the average rate of correct neighbor classification
                corrNeighMat = zeros(M_patches, N_patches);

                for M = 1:M_patches
                    for N = 1:N_patches
                        pNo = nodeReconst(M, N);
                        count = 0;

                        if(M == 1)
                            if(N == 1)

                                if(nodeReconst(M, N+1) == pNo+1)
                                    count = count+1;
                                end

                                if(nodeReconst(M+1, N) == pNo+N_patches)
                                    count = count+1;
                                end                               

                                corrNeighMat(M, N) = count/2;

                            elseif(N == N_patches)
                                if(nodeReconst(M, N-1) == pNo-1)
                                    count = count+1;
                                end

                                if(nodeReconst(M+1, N) == pNo+N_patches)
                                    count = count+1;
                                end                               

                                corrNeighMat(M, N) = count/2;
                            else
                                if(nodeReconst(M, N-1) == pNo-1)
                                    count = count+1;
                                end

                                if(nodeReconst(M, N+1) == pNo+1)
                                    count = count+1;
                                end

                                if(nodeReconst(M+1, N) == pNo+N_patches)
                                    count = count+1;
                                end                               

                                corrNeighMat(M, N) = count/3;                                
                            end
                        elseif(M==M_patches)
                            if(N == 1)

                                if(nodeReconst(M, N+1) == pNo+1)
                                    count = count+1;
                                end

                                if(nodeReconst(M-1, N) == pNo-N_patches)
                                    count = count+1;
                                end                               

                                corrNeighMat(M, N) = count/2;

                            elseif(N == N_patches)
                                if(nodeReconst(M, N-1) == pNo-1)
                                    count = count+1;
                                end

                                if(nodeReconst(M-1, N) == pNo-N_patches)
                                    count = count+1;
                                end    

                                corrNeighMat(M, N) = count/2;
                            else
                                if(nodeReconst(M, N-1) == pNo-1)
                                    count = count+1;
                                end

                                if(nodeReconst(M, N+1) == pNo+1)
                                    count = count+1;
                                end

                                if(nodeReconst(M-1, N) == pNo-N_patches)
                                    count = count+1;
                                end   

                                corrNeighMat(M, N) = count/3;                                
                            end
                        else
                            if(N==1)
                                if(nodeReconst(M, N+1) == pNo+1)
                                    count = count+1;
                                end

                                if(nodeReconst(M+1, N) == pNo+N_patches)
                                    count = count+1;
                                end

                                if(nodeReconst(M-1, N) == pNo-N_patches)
                                    count = count+1;
                                end   

                                corrNeighMat(M, N) = count/3;  

                            elseif(N==N_patches)
                                if(nodeReconst(M, N-1) == pNo-1)
                                    count = count+1;
                                end

                                if(nodeReconst(M+1, N) == pNo+N_patches)
                                    count = count+1;
                                end

                                if(nodeReconst(M-1, N) == pNo-N_patches)
                                    count = count+1;
                                end   

                                corrNeighMat(M, N) = count/3;  

                            else
                                if(nodeReconst(M, N-1) == pNo-1)
                                        count = count+1;
                                end

                                if(nodeReconst(M, N+1) == pNo+1)
                                    count = count+1;
                                end

                                if(nodeReconst(M+1, N) == pNo+N_patches)
                                    count = count+1;
                                end   

                                if(nodeReconst(M-1, N) == pNo-N_patches)
                                    count = count+1;
                                end   
                                corrNeighMat(M, N) = count/4;   
                            end

                        end                      
                    end
                end

                neighCorr(noFixInd, noBPIter*(RandIter-1) + BPIter) = sum(corrNeighMat(:))/noPatches;

                % Matching the cluster labels between the original label and the
                % new label
                clusterLabelReconst = clusterLabelOrig(nodeReconst);
                clusterCorr(noFixInd, noBPIter*(RandIter-1) + BPIter) = sum(clusterLabelReconst(:) == patchLabel(:))/noPatches;
                toc;
            end
        end
    end

    imNo
    pairCorr
    neighCorr
    clusterCorr
    failedCorr
    
    corrRateFileName = sprintf('%s%s%s%s%s%s%s', corrRatePath, 'corrRate_', num2str(imNo), '.mat');
    save(corrRateFileName, 'pairCorr', 'neighCorr', 'clusterCorr', 'failedCorr');
end




%% Figure generation
notFailedTotal = zeros(6, 10*10);
pairCorrTotal = zeros(6, 10*10);
neighCorrTotal = zeros(6, 10*10);
clusterCorrTotal = zeros(6, 10*10);
for imNo = 1:10
    corrRateFileName = sprintf('%s%s%s%s%s%s%s', corrRatePath, 'corrRate_', num2str(imNo), '.mat');
    load(corrRateFileName);
 
    notFailedTotal(:, 10*(imNo-1) +1 : 10*imNo) = ~failedCorr;
    pairCorrTotal(:, 10*(imNo-1) +1 : 10*imNo) = pairCorr;
    neighCorrTotal(:, 10*(imNo-1) +1 : 10*imNo) = neighCorr;
    clusterCorrTotal(:, 10*(imNo-1) +1 : 10*imNo) = clusterCorr;
end

pairCorrMean = sum(pairCorrTotal.*notFailedTotal,2)./sum(notFailedTotal, 2);
neighCorrMean = sum(neighCorrTotal.*notFailedTotal,2)./sum(notFailedTotal, 2);
clusterCorrMean = sum(clusterCorrTotal.*notFailedTotal,2)./sum(notFailedTotal, 2);


errorStdPairCorr= zeros(1,6);
errorStdNeighCorr= zeros(1,6);
errorStdClusterCorr= zeros(1,6);

for k = 1:6
    notFailedK = notFailedTotal(k, :);
    pairCorrKT = (squeeze(pairCorrTotal(k, :).*notFailedK));
    neighCorrKT = (squeeze(neighCorrTotal(k, :).*notFailedK));
    clusterCorrKT = (squeeze(clusterCorrTotal(k, :).*notFailedK));
    
    indPairCorr = find(pairCorrKT ~=0);
    pairCorrK = pairCorrKT(indPairCorr);
    
    indNeighCorr = find(neighCorrKT ~=0);
    neighCorrK = neighCorrKT(indNeighCorr);  
    
    indClusterCorr = find(clusterCorrKT ~=0);
    clusterCorrK = clusterCorrKT(indClusterCorr);   
    
    errorStdPairCorr(k) = std(pairCorrK);
    errorStdNeighCorr(k) = std(neighCorrK);
    errorStdClusterCorr(k) = std(clusterCorrK);
end


figure, errorbar([0:2:10], pairCorrMean, errorStdPairCorr, 'r-', 'LineWidth', 3);
hold on
errorbar([0:2:10], neighCorrMean, errorStdNeighCorr, 'g-', 'LineWidth', 3);
hold on
errorbar([0:2:10], clusterCorrMean, errorStdClusterCorr, 'b-', 'LineWidth', 3);
axis([-0.5, 10.5, 0, 1]);
legend('Pairwise comparison', 'Neighborhood comparison', 'Cluster comparison');
xlabel('The number of anchor patches', 'FontSize', 18)
ylabel('The fraction of correct patch placement', 'FontSize', 18);
fileName = sprintf('%s%s%s%s%s', resultPath, 'reconstRate.eps');
print('-depsc', fileName);

